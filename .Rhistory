plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
filtered_data <- switch(input$survived_input,
"Alle" = data_1,
"Überlebt" = data_1[data_1$survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$survived == "Nein", ])
fill_colors <- ifelse(input$survived_input == "Überlebt", "green", "red")
ggplot(filtered_data, aes(x = age_group, fill = factor(survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = "Überlebensstatus") +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = fill_colors, labels = c("Nicht-Überlebt", "Überlebt"), name = "Überlebensstatus")
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
data_1 <- data.frame(survived = factor(data_1$survived, labels = c("Nein", "Ja")), age = data_1$age)
data_1$age_group <- cut(data_1$age, breaks = seq(0, max(data_1$age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1),
verbatimTextOutput("status_output") # Anzeige des Überlebensstatus
),
mainPanel(
plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
fill_colors <- c("Nicht-Überlebt" = "red", "Überlebt" = "green")
if (input$survived_input == "Alle") {
ggplot(data_1, aes(x = age_group, fill = factor(survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = "Überlebensstatus") +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = fill_colors, labels = c("Nicht-Überlebt", "Überlebt"), name = "Überlebensstatus")
} else {
filtered_data <- switch(input$survived_input,
"Überlebt" = data_1[data_1$survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = "Überlebensstatus") +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = fill_colors, labels = c("Nicht-Überlebt", "Überlebt"), name = "Überlebensstatus")
}
})
# Überlebensstatus basierend auf der Dropdown-Auswahl anzeigen
output$status_output <- renderPrint({
if (input$survived_input == "Überlebt") {
"Überlebt"
} else if (input$survived_input == "Nicht-Überlebt") {
"Nicht-Überlebt"
} else {
""
}
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyApp(ui, server)
library(shiny)
library(ggplot2)
data_1 <- data.frame(survived, age)
data_1_clean <- na.omit(data_1)
data_1$survived <- factor(data_1$survived, labels = c("Nein", "Ja"))
data_1$age_group <- cut(data_1$age, breaks = seq(0, max(data_1$age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
plot_1 <- ggplot(data_1_clean, aes(x = age_group, fill = factor(survived))) +
geom_histogram(binwidth = 1, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = "Überlebensstatus") +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = c("red", "green"), labels = c("Nicht-Überlebt", "Überlebt"), name = "Überlebensstatus")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1)
),
mainPanel(
plotOutput("histogram"),
br(),
verbatimTextOutput("status_output")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
fill_colors <- c("Nicht-Überlebt" = "red", "Überlebt" = "green")
if (input$survived_input == "Alle") {
plot_1
} else {
filtered_data <- switch(input$survived_input,
"Überlebt" = data_1[data_1$survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = "Überlebensstatus") +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = fill_colors, labels = c("Nicht-Überlebt", "Überlebt"), name = "Überlebensstatus")
}
})
# Überlebensstatus basierend auf der Dropdown-Auswahl anzeigen
output$status_output <- renderPrint({
if (input$survived_input == "Alle") {
""
} else if (input$survived_input == "Überlebt") {
"Überlebt"
} else if (input$survived_input == "Nicht-Überlebt") {
"Nicht-Überlebt"
} else {
""
}
})
}
shinyApp(ui, server)library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_1 <- data.frame(survived, age)
runApp()
data_1 <- data.frame(survived, age)
data_1$survived <- factor(data_1$survived, labels = c("Nein", "Ja"))
data_1$survived
data_1$age_group <- cut(data_1$age, breaks = seq(0, max(data_1$age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
data_1$age_group
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
filtered_data <- switch(input$survived_input,
"Alle" = data_1,
"Überlebt" = data_1[data_1$survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = ifelse(input$survived_input == "Überlebt", "Überlebt", "Nicht-Überlebt")) +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = ifelse(input$survived_input == "Überlebt", c("green"), c("red")),
labels = ifelse(input$survived_input == "Überlebt", c("Überlebt"), c("Nicht-Überlebt")),
name = "Überlebensstatus")
})
}
shinyApp(ui, server)
data_survived_alive <- titanic_data$survived == 1;
data_1 <- data.frame(survived, age)
data_1$survived <- factor(data_1$survived, labels = c("Nein", "Ja"))
data_1$survived
data_1$age_group <- cut(data_1$age, breaks = seq(0, max(data_1$age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
data_1$age_group
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
filtered_data <- switch(input$survived_input,
"Alle" = data_1,
"Überlebt" = data_1[data_1$survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = ifelse(input$survived_input == "Überlebt", "Überlebt", "Nicht-Überlebt")) +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = ifelse(input$survived_input == "Überlebt", c("green"), c("red")),
labels = ifelse(input$survived_input == "Überlebt", c("Überlebt"), c("Nicht-Überlebt")),
name = "Überlebensstatus")
})
}
shinyApp(ui, server)
data_survived_alive <- titanic_data$survived == 1;
data_1 <- data.frame(survived, age)
data_1_clean <- na.omit(data_1)
data_1$survived <- factor(data_1$survived, labels = c("Nein", "Ja"))
data_1$survived
data_1$age_group <- cut(data_1$age, breaks = seq(0, max(data_1$age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
data_1$age_group
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
filtered_data <- switch(input$survived_input,
"Alle" = data_1,
"Überlebt" = data_1[data_1$survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = ifelse(input$survived_input == "Überlebt", "Überlebt", "Nicht-Überlebt")) +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = ifelse(input$survived_input == "Überlebt", c("green"), c("red")),
labels = ifelse(input$survived_input == "Überlebt", c("Überlebt"), c("Nicht-Überlebt")),
name = "Überlebensstatus")
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
runApp()
library(shiny)
library(ggplot2)
# Laden des Titanic-Datensatzes
data(titanic_train, package = "titanic_data.csv")
runApp()
library(shiny)
library(ggplot2)
data_survived_alive <- titanic_data$survived == 1;
data_1 <- data.frame(survived, age)
data_1_clean <- na.omit(data_1)
data_1$survived <- factor(data_1$survived, labels = c("Nein", "Ja"))
data_1$survived
data_1$age_group <- cut(data_1$age, breaks = seq(0, max(data_1$age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
data_1$age_group
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
filtered_data <- switch(input$survived_input,
"Alle" = data_1_clean,
"Überlebt" = data_1[data_1$survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = ifelse(input$survived_input == "Überlebt", "Überlebt", "Nicht-Überlebt")) +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = ifelse(input$survived_input == "Überlebt", c("green"), c("red")),
labels = ifelse(input$survived_input == "Überlebt", c("Überlebt"), c("Nicht-Überlebt")),
name = "Überlebensstatus")
})
}
shinyApp(ui, server)
install.packages("titanic")
runApp()
data_1 <- titanic_train[, c("Survived", "Age")]
data_1_clean <- na.omit(data_1)
data_1$Survived <- factor(data_1$Survived, labels = c("Nein", "Ja"))
data_1$age_group <- cut(data_1$Age, breaks = seq(0, max(data_1$Age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
filtered_data <- switch(input$survived_input,
"Alle" = data_1_clean,
"Überlebt" = data_1[data_1$Survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$Survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(Survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = ifelse(input$survived_input == "Überlebt", "Überlebt", "Nicht-Überlebt")) +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = ifelse(input$survived_input == "Überlebt", c("green"), c("red")),
labels = ifelse(input$survived_input == "Überlebt", c("Überlebt"), c("Nicht-Überlebt")),
name = "Überlebensstatus")
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
data(titanic_train, package = "titanic")
data_1 <- titanic_train[, c("Survived", "Age")]
data_1_clean <- na.omit(data_1)
data_1$Survived <- factor(data_1$Survived, labels = c("Nein", "Ja"))
data_1$age_group <- cut(data_1$Age, breaks = seq(0, max(data_1$Age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
filtered_data <- switch(input$survived_input,
"Alle" = data_1_clean,
"Überlebt" = data_1[data_1$Survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$Survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(Survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = ifelse(input$survived_input == "Überlebt", "Überlebt", "Nicht-Überlebt")) +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = ifelse(input$survived_input == "Überlebt", c("green"), c("red")),
labels = ifelse(input$survived_input == "Überlebt", c("Überlebt"), c("Nicht-Überlebt")),
name = "Überlebensstatus")
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
filtered_data <- switch(input$survived_input,
"Alle" = data_1,
"Überlebt" = data_1[data_1$Survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$Survived == "Nein", ])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(ggplot2)
data_1$Survived <- factor(data_1$Survived, labels = c("Nein", "Ja"))
data_1$age_group <- cut(data_1$Age, breaks = seq(0, max(data_1$Age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
filtered_data <- switch(input$survived_input,
"Alle" = data_1,
"Überlebt" = data_1[data_1$Survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$Survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(Survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = "Überlebensstatus") +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = c("red", "green"),
labels = c("Nicht-Überlebt", "Überlebt"),
name = "Überlebensstatus")
})
observeEvent(input$survived_input, {
if (input$survived_input == "Nicht-Überlebt") {
updateSelectInput(session, "survived_input", selected = "Nicht-Überlebt")
} else {
updateSelectInput(session, "survived_input", selected = "Überlebt")
}
}, ignoreInit = TRUE)
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
runApp()
runApp()
library(shiny)
library(ggplot2)
data_1$Survived <- factor(data_1$Survived, labels = c("Nein", "Ja"))
data_1$age_group <- cut(data_1$Age, breaks = seq(0, max(data_1$Age, na.rm = TRUE), by = 10), include.lowest = TRUE, labels = FALSE)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("survived_input", "Überlebensstatus:",
choices = c("Alle", "Überlebt", "Nicht-Überlebt")),
sliderInput("bin_input", "Bin-Breite:", min = 1, max = 10, value = 1)
),
mainPanel(
plotOutput("histogram")
)
)
)
server <- function(input, output) {
output$histogram <- renderPlot({
filtered_data <- switch(input$survived_input,
"Alle" = data_1,
"Überlebt" = data_1[data_1$Survived == "Ja", ],
"Nicht-Überlebt" = data_1[data_1$Survived == "Nein", ])
ggplot(filtered_data, aes(x = age_group, fill = factor(Survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = "Überlebensstatus") +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben oder nicht") +
scale_fill_manual(values = c("red", "green"),
labels = c("Nicht-Überlebt", "Überlebt"),
name = "Überlebensstatus")
})
observeEvent(input$survived_input, {
if (input$survived_input == "Nicht-Überlebt") {
output$histogram <- renderPlot({
filtered_data <- data_1[data_1$Survived == "Nein", ]
ggplot(filtered_data, aes(x = age_group, fill = factor(Survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = "Überlebensstatus") +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die nicht überlebt haben") +
scale_fill_manual(values = "red", labels = "Nicht-Überlebt", name = "Überlebensstatus")
})
} else if (input$survived_input == "Überlebt") {
output$histogram <- renderPlot({
filtered_data <- data_1[data_1$Survived == "Ja", ]
ggplot(filtered_data, aes(x = age_group, fill = factor(Survived))) +
geom_histogram(binwidth = input$bin_input, color = "black") +
scale_x_continuous(breaks = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1),
labels = seq(0, max(data_1$age_group, na.rm = TRUE), by = 1)) +
labs(x = "Altersgruppe", y = "Anzahl", fill = "Überlebensstatus") +
ggtitle("Aufteilung der Personen (je nach Altersgruppe), die überlebt haben") +
scale_fill_manual(values = "green", labels = "Überlebt", name = "Überlebensstatus")
})
}
})
}
shinyApp(ui, server)
runApp()
